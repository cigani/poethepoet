[tool.poetry]
name = "dummy-project"
version = "0.1.0"
description = "dummy-project"
authors = ["Nat Noordanus <n@natn.me>"]

packages = [
  { include = "dummy_package" }
]

[tool.poe]
env.PLANET = "EARTH"
env.DEST = "MARS"

# Alternate sub-table syntax for task with lots of config
[tool.poe.tasks.echo]
cmd = "echo POE_ROOT:$POE_ROOT ${BEST_PASSWORD}, task_args:"
help = "It says what you say"
env = { BEST_PASSWORD = "Password1" }




[tool.poe.tasks]
show_env = "env"
greet = { script = "dummy_package:main" }
greet-shouty = { script = "dummy_package:main(upper=True)" }
greet-keyed = { script ="dummy_package:args(greeting, user, optional, upper, default=default_value)", args = ["greeting", "user", "optional", "upper"]}
greet-automatic = { script="dummy_package:args"}

count =  { shell = "echo 1 && echo 2 && echo $(python -c 'print(1 + 2)')" }
also_echo = { ref = "echo" }

# Dotted key syntax for tasks with multiple keys specified
sing.help = "busts some rhymes"
sing.shell = """
echo "this is the story";
echo "all about how" &&      # the last line won't run
echo "my life got flipped;
  turned upside down" ||
echo "bam bam baaam bam"
"""

part1 = "echo 'Hello'"
_part2.cmd = "echo '${SUBJECT}!'"
_part2.env = { SUBJECT = "World" }
composite_task.sequence = [
  ["part1", "_part2"],
  # wrapping in arrays means we can have different types of task in the sequence
  [{cmd = "echo '${SMILEY}!'"}]
]
# env var is inherited by subtask
composite_task.env = { SMILEY = ":)" }

also_composite_task = ["composite_task"]

greet-multiple.sequence = ["dummy_package:main('Tom')", "dummy_package:main('Jerry')"]
greet-multiple.default_item_type = "script"

travel = [
  { cmd = "echo 'from $PLANET to'" },
  { script = "dummy_package:print_var('DEST')" }
]

[tool.poe.tasks.greet-rekeyed]
script = "dummy_package:args(greeting, user,optional=opt, upper=upper, fvar, ivar)"
  [tool.poe.tasks.greet-rekeyed.args.greeting]
    type = 'string'
  [tool.poe.tasks.greet-rekeyed.args.opt]
  [tool.poe.tasks.greet-rekeyed.args.user]
    type = 'string'
  [tool.poe.tasks.greet-rekeyed.args.upper]
    type = 'string' # For the time being any Flags are represented as Strings
  [tool.poe.tasks.greet-rekeyed.args.ivar]
    type = 'integer'
  [tool.poe.tasks.greet-rekeyed.args.fvar]
    type = 'float'
    help ='A float'

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"
